from guardrails.hub import (
    RegexMatch, ToxicLanguage, MentionsDrugs,
    CompetitorCheck, ValidLength, ValidURL,
    ValidJson, ValidPython, ValidSQL,
    WebSanitization, ValidAddress, UnusualPrompt,
    SqlColumnPresence, ResponsivenessCheck, ReadingTime,
    QuotesPrice, OneLine, LowerCase,
    HasUrl, ExcludeSqlPredicates, EndpointIsReachable,
    SimilarToDocument, SaliencyCheck, RelevancyEvaluator,
    ProvenanceLLM, LowerCase, LogicCheck,
    GibberishText, ExtractedSummarySentencesMatch, DetectPII,
    ArizeDatasetEmbeddings, CorrectLanguage, 
    DetectPromptInjection, ExtractiveSummary, NSFWText,
    ProvenanceEmbeddings, QARelevanceLLMEval, RestrictToTopic,
    SecretsPresent, SimilarToPreviousValues, WikiProvenance,
    CsvMatch, EndsWith, FinancialTone,
    LLMCritic, PolitenessCheck, ReadingLevel,
    RedundantSentences, ResponseEvaluator, SensitiveTopic,
    TwoWords,
    UpperCase, ValidChoices, ValidRange,
    ValidOpenApiSpec, ProfanityFree )

VALIDATORS = {
    'arize_dataset_embeddings': ArizeDatasetEmbeddings,
    'correct_language': CorrectLanguage,
    'detect_prompt_injection': DetectPromptInjection,
    'extractive_summary': ExtractiveSummary,
    'nsfw_text': NSFWText,
    'provenance_embeddings': ProvenanceEmbeddings,
    'qa_relevance_llm_eval': QARelevanceLLMEval,
    'restrict_to_topic': RestrictToTopic,
    'secrets_present': SecretsPresent,
    'similar_to_previous_values': SimilarToPreviousValues,
    'wiki_provenance': WikiProvenance,
    'csv_match': CsvMatch,
    'ends_with': EndsWith,
    'financial_tone': FinancialTone,
    'llm_critic': LLMCritic,
    'mentions_drugs': MentionsDrugs,
    'politeness_check': PolitenessCheck,
    'reading_level': ReadingLevel,
    'redundant_sentences': RedundantSentences,
    'response_evaluator': ResponseEvaluator,
    'sensitive_topic': SensitiveTopic,
    'two_words': TwoWords,
    'upper_case': UpperCase,
    'valid_choices': ValidChoices,
    'valid_length': ValidLength,
    'valid_python': ValidPython,
    'valid_sql': ValidSQL,
    'web_sanitization': WebSanitization,
    'valid_url': ValidURL,
    'valid_range': ValidRange,
    'valid_openapi_spec': ValidOpenApiSpec,
    'valid_json': ValidJson,
    'valid_address': ValidAddress,
    'unusual_prompt': UnusualPrompt,
    'sql_column_presence': SqlColumnPresence,
    'responsiveness_check': ResponsivenessCheck,
    'regex_match': RegexMatch,
    'reading_time': ReadingTime,
    'quotes_price': QuotesPrice,
    'one_line': OneLine,
    'lower_case': LowerCase,
    'has_url': HasUrl,
    'exclude_sql_predicates': ExcludeSqlPredicates,
    'endpoint_is_reachable': EndpointIsReachable,
    'toxic_language': ToxicLanguage,
    'similar_to_document': SimilarToDocument,
    'saliency_check': SaliencyCheck,
    'relevancy_evaluator': RelevancyEvaluator,
    'provenance_llm': ProvenanceLLM,
    'profanity_free': ProfanityFree,
    'logic_check': LogicCheck,
    'gibberish_text': GibberishText,
    'extracted_summary_sentences_match': ExtractedSummarySentencesMatch,
    'detect_pii': DetectPII,
    'competitor_check': CompetitorCheck,
}